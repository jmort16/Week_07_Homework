WEEK 7 HOMEWORK

#1  Create a new column called “status” in the rental table that uses a case statement to indicate if a film was returned late, early, or on time. 

ALTER TABLE rental
ADD status varchar(10);
UPDATE rental
SET status =
    CASE WHEN (EXTRACT (DAY FROM rental.return_date - rental.rental_date)) > film.rental_duration THEN 'Late'
		WHEN (EXTRACT (DAY FROM rental.return_date - rental.rental_date)) < film.rental_duration THEN 'Early'
		ELSE 'On Time' END
FROM film;
SELECT
	f.title,
	r.status
FROM film AS f
LEFT JOIN inventory AS inv
		ON f.film_id = inv.film_id
	LEFT JOIN rental AS r
		ON inv.inventory_id=r.inventory_id
GROUP BY r.status, f.title
ORDER BY r.status;

/* To add permanent column to the rental table, I had to use ALTER TABLE and ADD to
create the new status column.  Then I used UPDATE to enter values into the column
based on the length of the rental time period versus the rental time allowed.  AFter
entering the values, I sorted the data by the status column because I thought it would 
be more informative that way. */


#2  Show the total payment amounts for people who live in Kansas City or Saint Louis.

SELECT 
	cust.last_name,
	cust.first_name,
	city.city,
	SUM(pmt.amount) AS total_payments
FROM city
LEFT JOIN address
ON city.city_id = address.city_id
LEFT JOIN customer AS cust
ON address.address_id=cust.address_id
LEFT JOIN payment as pmt
ON cust.customer_id = pmt.customer_id
WHERE city.city = 'Kansas City' OR city.city = 'Saint Louis'
GROUP BY city.city, cust.last_name, cust.first_name

/* First, I mapped out a plan on paper to connect the city name with the payment amount, which is my ultimate goal
(by way of customer, of course).  I started with city, left joined that to address by city_id, then to customer by 
address_id, then to payment by customer_id.  I used the aggregate SUM to find the total payments by customer, and
included that in my SELECT statement at the start.  According to my table, there is only one customer from Saint
Louis and one from Kansas City...which seems strange, to be honest.  But I did some further filtering through the
data and this seems to be accurate. */

#3  How many films are in each category? Why do you think there is a table for category and a table for film category?

SELECT 
	cat.name as category,
	COUNT(fc.film_id) AS number_of_films
FROM category AS cat
LEFT JOIN film_category AS fc
ON cat.category_id = fc.category_id
GROUP BY category
ORDER BY category;

/*  I only needed to join two tables this time, so that was nice!  :)  I wanted to display the category name, but 'name'
was too vague, so I aliased it as 'category'.  I used the aggregate COUNT to find the number of film_id's by category.
Of course, I had to join the category and film_category tables in order to accomplish that.*/

/* As to why there is a table for category and another table for film_category, I think that the category table serves the purpose of assigning an ID number to each new category, whereas the film_category table serves to assign each film (via its ID) to the appropriate category. */

#4  Show a roster for the staff that includes their email, address, city, and country (not ids)

SELECT
	s.last_name,
	s.first_name,
	s.email,
	address.address,
	city.city, 
	country.country
FROM staff AS s
	LEFT JOIN address
	ON s.address_id = address.address_id
	LEFT JOIN city
	ON address.city_id = city.city_id
	LEFT JOIN country
	ON city.country_id=country.country_id

/*  This query was just a matter of locating the tables containing each of the fields I needed to include in my SELECT
statement, then joining all of the tables necessary to gather the information into one table.  I used the ID for the
purpose of joining, but none were listed in my SELECT statement, which means that they won't appear in my result. */

#5  Show the film_id, title, and length for the movies that were returned from May 15 to 31, 2005

SELECT 
	f.film_id,
	f.title,
	f.length as length_in_minutes,
	r.return_date
FROM film as f
LEFT JOIN inventory AS inv
ON f.film_id=inv.film_id
LEFT JOIN rental AS r
ON inv.inventory_id=r.inventory_id
WHERE (r.return_date >= '2005-05-15' AND r.return_date <= '2005-05-31')
ORDER BY r.return_date

/*  I started with the film table, since it contains the information to be displayed in my result.  I had to join the
film table to the rental table, however, so that I could filter the films by return date.  I had to use the inventory
table to connect my joins between the film and rental tables.  Finally, I ordered by rental date just to verify the
efficacy of my query. */


#6  Write a subquery to show which movies are rented below the average price for all movies. 

SELECT 
	title
FROM film
WHERE rental_rate < (SELECT 
	 			AVG(rental_rate)
	 			FROM film)

/* I selected the title and rental_rate columns from the film table, then wrote a subquery that would find the average
rental rate for the films.  I used my subquery in the WHERE clause to compare each film's rental rate with the average,
and displayed only those films with a lower than average rental rate. */


#7  Write a join statement to show which movies are rented below the average price for all movies.

SELECT 
	f1.title as films_with_lower_than_avg_rental_fee, 
	f1.rental_rate
FROM 
	film AS f1
CROSS JOIN 
	film AS f2
GROUP BY f1.title, f1.rental_rate
HAVING f1.rental_rate < AVG(f2.rental_rate);

/*  In order to use JOIN as the instructions required on this question, I had to CROSS
JOIN the film table to itself.  All of the information needed for the query was
contained in the film table, so joining multiple tables was not necessary.  I used 
HAVING instead of WHERE in this situation so that I could use the aggregate function
AVG over all of the rows instead of each row individually.  */

#8  Perform an explain plan on 6 and 7, and describe what you’re seeing and important ways they differ.

	For question 6:
	"Seq Scan on film  (cost=66.51..133.01 rows=333 width=15) (actual time=0.315..0.513 rows=341 loops=1)"
	"  Filter: (rental_rate < $0)"
	"  Rows Removed by Filter: 659"
	"  InitPlan 1 (returns $0)"
	"    ->  Aggregate  (cost=66.50..66.51 rows=1 width=32) (actual time=0.300..0.300 rows=1 loops=1)"
	"          ->  Seq Scan on film film_1  (cost=0.00..64.00 rows=1000 width=6) (actual time=0.005..0.110 rows=1000 loops=1)"
	"Planning Time: 0.148 ms"
	"Execution Time: 0.551 ms"
	
	For question #7:
	"HashAggregate  (cost=20130.50..20145.50 rows=333 width=21) (actual time=512.780..513.285 rows=341 loops=1)"
	"  Group Key: f1.title, f1.rental_rate"
	"  Filter: (f1.rental_rate < avg(f2.rental_rate))"
	"  Batches: 1  Memory Usage: 577kB"
	"  Rows Removed by Filter: 659"
	"  ->  Nested Loop  (cost=0.00..12630.50 rows=1000000 width=27) (actual time=0.038..139.549 rows=1000000 loops=1)"
	"        ->  Seq Scan on film f1  (cost=0.00..64.00 rows=1000 width=21) (actual time=0.022..0.634 rows=1000 loops=1)"
	"        ->  Materialize  (cost=0.00..69.00 rows=1000 width=6) (actual time=0.000..0.037 rows=1000 loops=1000)"
	"              ->  Seq Scan on film f2  (cost=0.00..64.00 rows=1000 width=6) (actual time=0.009..0.207 rows=1000 loops=1)"
	"Planning Time: 0.210 ms"
	"Execution Time: 513.448 ms"

	The subquery technique used in question 6 filters the table first, removing 659 rows from the data, THEN it aggregates the 
	remaining data that made it through the filtering process.  In contrast, the joining technique used in question 7 aggregates
	first (using ALL of the rows), then filters through and removes rows afterward.  I think this must explain why the execution
	time for question 6's query was almoat a thousand times faster than question 7's query.  Yikes!  Unfortunately, I strongly
	prefer joining to subqueries at the moment.  I guess I need to force myself to do more subqueries!  *?
	The joining


#9  With a window function, write a query that shows the film, its duration, and what percentile the duration fits into. 

SELECT
	film.title,
	film.length,
	NTILE(100) OVER
         (ORDER BY film.length)
         AS percentile
FROM film
ORDER BY percentile DESC;


#10  In under 100 words, explain what the difference is between set-based and procedural programming. Be sure to specify which sql and python are. 


